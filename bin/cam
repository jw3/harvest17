#!/usr/bin/env bash

readonly camconfig="${3:-/etc/cams.json}"

mjpg() {
  local camname="$1"
  local player=$(jq --arg cam $camname -r '.cams[] | select(.name | contains($cam)) | "omxplayer --win \"\(.screen)\" \"http://\(.user):\(.pass)@\(.host)/cgi-bin/mjpg/video.cgi\" --live --threshold .24 --fps 30 --orientation 270 -r -n -1"' ${camconfig})

  echo "$player"
  screen -dmS "$camname" sh -c "$player"
}

rtsp() {
  local camname="$1"
  local player=$(jq --arg cam $camname -r '.cams[] | select(.name | contains($cam)) | "omxplayer --avdict rtsp_transport:tcp --win \"\(.screen)\" \"rtsp://\(.user):\(.pass)@\(.host):\(.port)\" --live --threshold .24 --orientation 270 -n -1"' ${camconfig})

  echo "$player"
  screen -dmS "$camname" sh -c "$player"
}

view() {
  local name="$1"
  local mode=$(jq --arg cam $name -r '.cams[] | select(.name | contains($cam)) | .mode' ${camconfig})

  echo "viewing $name as $mode"
  $("$mode" "$name")
}

start() {
  local name="$1"
  local uri=$(jq --arg cam "$name" -r '.cams[] | select(.name | contains($cam)) | [.host, .port|tostring] | join(":")'  "$camconfig")

  if [[ ! -z "$uri" ]]; then
    echo "starting camera service [$name] at [$uri]"
    while true; do
      wait-for-it.sh ${uri} --timeout=0 --strict -- cam view ${name}
      sleep 2
    done
  else
    echo "camera service [$name] is not configured"
  fi
}


"$@"
